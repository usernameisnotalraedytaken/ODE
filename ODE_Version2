#include<bits/stdc++.h>
#define step 1e-5 
#define eps 1e-11
using namespace std;
struct pix
{
	double x;
	double y;
};
double f(double x, double y)
{
	return y;
}
double g(double x)
{
	return cos(x); 
}
double df(double f(double), double x)
{
	return (f(x + step) - f(x - step)) / (2.0 * step);
}

double df4(double f(double), double x)
{
	return (f(x - step) - 8.0 * f(x - step / 2.0) + 8.0 * f(x + step / 2.0) - f(x + step)) / (6.0 * step);
}
double Newton(double g(double), double x0)
{
	double x1;
	while(abs(g(x0)) > eps)
	{
		x1 = x0 - g(x0) / df(g, x0);
		x0 = x1;
	}
	return x0;
}
double intt_simpson_slice(double g(double), double x1, double x2, double x3, double h)
{
	return h / 3.0 * (g(x1) + 4.0 * g(x2) + g(x3));
}
double Simpson(double g(double), double x1, double x2, int t)
{
	double h = (x1 - x2) / (2.0 * t);
	double sum = 0, x = x1;
	for(int i = 0; i < t; ++i)
	{
		sum += intt_simpson_slice(g, x, x + h, x + h + h, h);
		x += 2.0 * h; 
	}
	return sum;
}
double Int(double g(double), double x1, double x2, double IntMethod(double(*)(double), double, double, int))
{
	return IntMethod(g, x1, x2, 100);
}
double Dif(double f(double), double x, double DifMethod(double(*)(double), double))
{
	return DifMethod(f, x);
}
double Sol(double g(double), double x0, double Method(double(*)(double), double))
{
	return Method(g,x0);
}
double _l_(pix *x, double f(double), double *a, int len)
{
	if(len == 1)
		return f(x, a[0]);
	double *b = (double*)malloc(sizeof(a)), *c = (double*)malloc(sizeof(a));
	for(int i = 0; i < len; ++i)
	{
		if(i != len - 1)
			b[i] = a[i];
		if(i != 0)
			c[i] = a[i];
	}
	return (_l_(f, c, len - 1) - _l_(f, b, len - 1)) / (a[len - 1]- a[0]);
}
double fp(pix *a, int len, double in)
double Val(pix *a, int len)
{
	
}
/**
x, y: Init val
h: step length.
*/
double Euler(double x, double y, double h)
{
	double Yn = y + h * f(x, y);
}
double MEuler(double x, double y, double h)
{
	double Yn = y + h * f(x + h / 2.0, y + h / 2.0 * f(x, y));
	return Yn;
}
double RK2(double x, double y, double h)
{
	double Yn = y + h / 2.0 * (f(x, y) + f(x + h, y + h * f(x, y)));
	return Yn;
}
double RK4(double x, double y, double h)
{
	double K1 = f(x, y);
	double K2 = f(x + h / 2.0, y + h / 2.0 * K1);
	double K3 = f(x + h / 2.0, y + h / 2.0 * K2);
	double K4 = f(x + h, y + h * K3);
	double Yn = y + h / 6.0 * (K1 + 2.0 * K2 + 2.0 * K3 + K4);
	return Yn;
}
double ODE(double x0, double y0, double target, double odesloution(double, double, double))
{
	double y = y0, x = x0;
	for(int i = 0; i <= (int)1e5 * target; ++i)
	{
		y = odesloution(x, y, step);
		x += step;
	}
	return y;
} 

int main()
{
	printf("%.10lf", Newton(g, 1));
	return 0;
}
